package View;

import Bar.Bar;
import Bar.ColorManager;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Noc
 */
public class ViewSort extends javax.swing.JFrame {

    private Bar[] bars;
    private int[] array;
    private int max;
    private Random r = new Random();
    private int value, x, y = 450, width;
    private int index = 0;
    private int index_Arry = 0;
    private int speed;
    private Color swappingColor = Color.red;
    private boolean comlete = false;
    private boolean isRun = false;
    
    public ViewSort() {

        initComponents();
        this.setTitle("Sort Visualizer");
        
        ArrayPanel a = new ArrayPanel();
        a.setSize(1102, 500);
        a.setLocation(0, 0);
        
        jPanel1.removeAll();
        jPanel1.add(a, BorderLayout.CENTER);
        jPanel1.revalidate();
        jPanel1.repaint();
        jLabel5.setText("" + jSlider1.getValue());
        jLabel6.setText("" + jSlider1.getValue());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        CreateLabel = new javax.swing.JLabel();
        SortLabel = new javax.swing.JLabel();
        Sort_type = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
                formAncestorMoved(evt);
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                jPanel1ComponentRemoved(evt);
            }
        });
        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentShown(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1102, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 463, Short.MAX_VALUE)
        );

        jSlider1.setMaximum(250);
        jSlider1.setMinimum(10);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 2, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("100");

        CreateLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Create.png"))); // NOI18N
        CreateLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CreateLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CreateLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CreateLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CreateLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CreateLabelMouseReleased(evt);
            }
        });

        SortLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Sort.png"))); // NOI18N
        SortLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SortLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SortLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SortLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SortLabelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SortLabelMouseReleased(evt);
            }
        });

        Sort_type.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Selection_Sort.png"))); // NOI18N
        Sort_type.setVerifyInputWhenFocusTarget(false);
        Sort_type.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sort_typeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Sort_typeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Sort_typeMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Sort_typeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                Sort_typeMouseReleased(evt);
            }
        });

        jSlider2.setMinimum(1);
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 2, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("100");

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 2, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Speed");

        jLabel8.setFont(new java.awt.Font("Segoe UI Semibold", 2, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Quantity");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(CreateLabel)
                        .addGap(53, 53, 53)
                        .addComponent(SortLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(jSlider2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Sort_type, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(CreateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(SortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Sort_type, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(6, 6, 6)))
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(51, 51, 51))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    public int getNumber() {
        return jSlider1.getValue();
    }
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // TODO add your handling code here:

        jLabel5.setText("" + jSlider1.getValue());
        Graphics g = jPanel1.getGraphics();
        g.setColor(new Color(102, 102, 102));
        g.fillRect(0, 0, 1102, 500);
        if (bars != null) {
            for (int i = 0; i < max; i++) {
                bars[i].clear(g);
            }
        }
        CreateArray();
        
        
        for (int i = 0; i < max; i++) { 
            bars[i].draw(g);
        }
        g.dispose();


    }//GEN-LAST:event_jSlider1StateChanged
    
    private void CreateLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateLabelMouseEntered
        // TODO add your handling code here:
        CreateLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Create_Hor.png")));
    }//GEN-LAST:event_CreateLabelMouseEntered

    private void CreateLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateLabelMouseExited
        // TODO add your handling code here:
        CreateLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Create.png")));
    }//GEN-LAST:event_CreateLabelMouseExited

    private void CreateLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateLabelMousePressed
        // TODO add your handling code here:
        CreateLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Create_Click.png")));
    }//GEN-LAST:event_CreateLabelMousePressed

    private void CreateLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateLabelMouseReleased
        // TODO add your handling code here:
        CreateLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Create.png")));
    }//GEN-LAST:event_CreateLabelMouseReleased

    private void CreateLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateLabelMouseClicked
        // TODO add your handling code here:
        Graphics g = jPanel1.getGraphics();
        speed = 0;
        if(isRun)
        {    
            while (!comlete) {            
            try {
                TimeUnit.MILLISECONDS.sleep(200);
        } catch (Exception ex) {}
        }}
        g.setColor(new Color(102, 102, 102));
        g.fillRect(0, 0, 1102, 500);
        if (bars != null) {
            for (int i = 0; i < max; i++) {
                bars[i].clear(g);
            }
            g.fillRect(0, 0, 1102, 500);
        }
        CreateArray();
        for (int i = 0; i < max; i++) {
            bars[i].draw(g);
        }
        g.dispose();
    }//GEN-LAST:event_CreateLabelMouseClicked
      
    private void SortLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SortLabelMouseEntered
        // TODO add your handling code here:
        SortLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Sort_Hor.png")));

    }//GEN-LAST:event_SortLabelMouseEntered

    private void SortLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SortLabelMouseExited
        // TODO add your handling code here:
        SortLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Sort.png")));
    }//GEN-LAST:event_SortLabelMouseExited

    private void SortLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SortLabelMousePressed
        // TODO add your handling code here:
        SortLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Sort_Click.png")));
    }//GEN-LAST:event_SortLabelMousePressed

    private void SortLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SortLabelMouseReleased
        // TODO add your handling code here:
        SortLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Sort.png")));
    }//GEN-LAST:event_SortLabelMouseReleased

    private void Sort_typeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Sort_typeMouseClicked
        // TODO add your handling code here:
        
        index = index < 4 ? index + 1 : 0;
        switch (index) {
            case 0:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Selection_Sort.png")));
                break;
            case 1:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Insertion_Sort.png")));
                break;
            case 2:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Bubble_Sort.png")));
                break;
            case 3:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Merge_Sort.png")));
                break;
            case 4:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Quick_Sort.png")));
                break;

        }
    }//GEN-LAST:event_Sort_typeMouseClicked

    private void Sort_typeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Sort_typeMouseEntered
        // TODO add your handling code here:
        switch (index) {
            case 0:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Selection_Sort_hor.png")));
                break;
            case 1:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Insertion_Sort_hor.png")));
                break;
            case 2:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Bubble_Sort_hor.png")));
                break;
            case 3:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Merge_Sort_hor.png")));
                break;
            case 4:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Quick_Sort_hor.png")));
                break;

        }

    }//GEN-LAST:event_Sort_typeMouseEntered

    private void Sort_typeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Sort_typeMouseExited
        // TODO add your handling code here:
        switch (index) {
            case 0:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Selection_Sort.png")));
                break;
            case 1:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Insertion_Sort.png")));
                break;
            case 2:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Bubble_Sort.png")));
                break;
            case 3:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Merge_Sort.png")));
                break;
            case 4:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Quick_Sort.png")));
                break;

        }
    }//GEN-LAST:event_Sort_typeMouseExited

    private void Sort_typeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Sort_typeMousePressed
        // TODO add your handling code here:
        switch (index) {
            case 0:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Selection_Sort_click.png")));
                break;
            case 1:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Insertion_Sort_click.png")));
                break;
            case 2:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Bubble_Sort_click.png")));
                break;
            case 3:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Merge_Sort_click.png")));
                break;
            case 4:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Quick_Sort_click.png")));
                break;

        }
    }//GEN-LAST:event_Sort_typeMousePressed

    private void Sort_typeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Sort_typeMouseReleased
        // TODO add your handling code here:
        switch (index) {
            case 0:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Selection_Sort.png")));
                break;
            case 1:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Insertion_Sort.png")));
                break;
            case 2:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Bubble_Sort.png")));
                break;
            case 3:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Merge_Sort.png")));
                break;
            case 4:
                Sort_type.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Quick_Sort.png")));
                break;

        }
    }//GEN-LAST:event_Sort_typeMouseReleased

    private void SortLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SortLabelMouseClicked

        // TODO add your handling code here:
        if(!isRun)
        if (bars != null) {
            Thread t = new Thread(()
                    -> {
                run();
            });
            isRun = true;
            t.start();
        }else {
            JOptionPane.showMessageDialog(this,
                "Ban chua tao mang !!",
                "Error Title",
                JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_SortLabelMouseClicked

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        // TODO add your handling code here:

        jLabel6.setText("" + jSlider2.getValue());
        getSpeed();


    }//GEN-LAST:event_jSlider2StateChanged

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentHidden

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
         
    }//GEN-LAST:event_formComponentShown

    private void formAncestorMoved(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorMoved
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formAncestorMoved

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formAncestorResized

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:
       
    }//GEN-LAST:event_formWindowStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formWindowOpened

    private void jPanel1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentShown
        // TODO add your handling code here:
        System.out.println("Panel is shown.");
    }//GEN-LAST:event_jPanel1ComponentShown

    private void jPanel1ComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jPanel1ComponentRemoved
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jPanel1ComponentRemoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewSort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewSort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewSort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewSort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewSort().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CreateLabel;
    private javax.swing.JLabel SortLabel;
    private javax.swing.JLabel Sort_type;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    // End of variables declaration//GEN-END:variables
        public void ComleteAnimate(Graphics g) {
        for (int i = 2; i < max; i++) {
            bars[i].comleteSort(g, bars[i - 1], bars[i - 2], speed);
        }
        isRun = false;
        comlete = true;
        jSlider1.setEnabled(true);
    }

    public void getSpeed() {
        speed = 105 - jSlider2.getValue();
    }

    private void swap(int i, int j) {
        // swap the elements
        Graphics g = jPanel1.getGraphics();
        int temp = array[j];
        array[j] = array[i];
        array[i] = temp;

        // clear the bar
        bars[i].clear(g);
        bars[j].clear(g);

        // swap the drawings
        bars[j].setValue(bars[i].getValue());
        bars[i].setValue(temp);

        colorPair(j, i, swappingColor);
        g.dispose();

    }
    public  void onpaintArry()
    {
        if(bars!=null)
        {
        Graphics g = jPanel1.getGraphics();
        for (int i = 0; i < max; i++) {
            bars[i].draw(g);
        }
        g.dispose();
        }
    }
    public void run() {

        try {
            Graphics g = jPanel1.getGraphics();
            jSlider1.setEnabled(false);
            getSpeed();
            switch (index) {
                case 0:
                    if (bars != null) {
                        selectionSort(g);
                        ComleteAnimate(g);

                        break;
                    }

                case 1:
                    if (bars != null) {
                        insertionSort(g);
                        ComleteAnimate(g);

                    }
                    break;
                case 2:

                    if (bars != null) {
                        bubbleSort(g);
                        ComleteAnimate(g);

                    }
                    break;
                case 3:
                    if (bars != null) {
                        int[] tem = new int[max];
                        sort(tem, 0, max - 1, g);
                        ComleteAnimate(g);

                    }
                    break;
                case 4:

                    if (bars != null) {

                        quickSort(0, max -1,g);
                        ComleteAnimate(g);
                        jSlider1.setEnabled(true);
                    }
                    break;
            }

            g.dispose();
        } catch (Exception e) {

        }

    }

    public void ClearArray() {
        if (bars != null) {
            
            for (int i = 0; i < max; i++) {

                array[i] = 0;
            }
            bars = null;
            speed = 0;
        }
    }

    public void CreateArray() {
        x = 50;
        max = jSlider1.getValue();
        width = (int) (1100-x*2) / max;
        bars = new Bar[max];
        array = new int[max];
        comlete = false;
        Bar bar;
        for (int i = 0; i < max; i++) {
            value = r.nextInt(400) + 1;
            array[i] = value;
            bar = new Bar(x, y, width, value, Color.WHITE);
            bars[i] = bar;
            x += width;
        }
    }

    public void colorPair(int i, int j, Color color) {
        Graphics g = jPanel1.getGraphics();

        Color color0 = bars[i].getColor();
        Color color1 = bars[j].getColor();

        bars[i].setColor(color);
        bars[i].draw(g);

        bars[j].setColor(color);
        bars[j].draw(g);

        try {
            TimeUnit.MILLISECONDS.sleep(speed);
        } catch (Exception ex) {
        }
        //bars[i].clear(g);
        bars[i].setColor(color0);
        bars[i].draw(g);
        bars[j].setColor(color1);
        bars[j].draw(g);

        g.dispose();
    }
    private void colorBar(int index, Color color)
	{
            
            Graphics g = jPanel1.getGraphics();
		Bar bar = bars[index];
		Color oldColor = bar.getColor();

		bar.setColor(color);
		bar.draw(g);
		

		try {
			TimeUnit.MILLISECONDS.sleep(speed);
		} catch (Exception ex) {}

		bar.setColor(oldColor);
		bar.draw(g);

		g.dispose();
	}
    private Color getBarColor(int value) {
        int interval = (int) (array.length / 5.0);
        if (value < interval) {
            return ColorManager.BAR_ORANGE;
        } else if (value < interval * 2) {
            return ColorManager.BAR_GREEN;
        } else if (value < interval * 3) {
            return ColorManager.BAR_YELLOW;
        } else if (value < interval * 4) {
            return ColorManager.BAR_CYAN;
        }
        return ColorManager.BAR_BLUE;

    }

    public void selectionSort(Graphics g) {

        int indexMin, i, j;
        // lap qua ta ca cac so
        for (i = 0; i < array.length - 1; i++) {
            // thiet lap phan tu hien tai la min
            indexMin = i;

            // kiem tra phan tu hien tai co phai la nho nhat khong
            for (j = i + 1; j < array.length; j++) {
                if (array[j] < array[indexMin]) {
                    indexMin = j;

                }
            }

            swap(indexMin, i);
            bars[i].setColor(getBarColor(i));
            bars[i].draw(g);

        }
        bars[i].setColor(getBarColor(i));
        bars[i].draw(g);

    }

    public void bubbleSort(Graphics g) {
        int temp;
        int i, j;

        boolean swapped = false;

        // lap qua tat ca cac so
        for (i = 0; i < array.length - 1; i++) {
            swapped = false;

            // vong lap thu hai
            for (j = 0; j < array.length - 1 - i; j++) {

                // kiem xa xem so ke tiep co nho hon so hien tai hay khong
                // trao doi cac so.
                // (Muc dich: lam noi bot (bubble) so lon nhat)
                if (array[j] > array[j + 1]) {
                    colorPair(j, j+1, swappingColor);
                    swap(j, j + 1);

                }

            }
            bars[j].setColor(getBarColor(j));
            bars[j].draw(g);

        }
        bars[0].setColor(getBarColor(0));
        bars[0].draw(g);
    }

    public void insertionSort(Graphics g) {
        int valueToInsert;
        int holePosition;
        int i;

        
        bars[0].setColor(getBarColor(0));
        bars[0].draw(g);
        for (i = 1; i < array.length; i++) {

           
            bars[i].setColor(getBarColor(i));
            valueToInsert = array[i];

           
            holePosition = i;

           
            while (holePosition > 0 && array[holePosition - 1] > valueToInsert) {
                
                
               
                
                swap(holePosition, holePosition-1);
                
                
                holePosition--;

            }

            if (holePosition != i) {

               
                array[holePosition] = valueToInsert;
                bars[holePosition].setValue(valueToInsert);
            }
            
            bars[i].draw(g);

        }
    }

    public void merging(int temp[], int low, int mid, int high, Graphics g) {
        int l1, l2, i;

        l1 = low;
        l2 = mid + 1;
        for (i = low; l1 <= mid && l2 <= high; i++) {
            if (array[l1] <= array[l2]) {
                temp[i] = array[l1++];
            } else {
                temp[i] = array[l2++];
            }
        }

        while (l1 <= mid) {
            temp[i++] = array[l1++];
        }
        while (l2 <= high) {
            temp[i++] = array[l2++];
        }
        for (i = low; i <= high; i++) {
           
            bars[i].clear(g);
            array[i] = temp[i];
            bars[i].setValue(temp[i]);
            colorBar(i,swappingColor);
            bars[i].setColor(getBarColor(i));
            bars[i].draw(g);
        }
    }
    
    
    public void sort(int temp[], int low, int high, Graphics g) {
        int mid;

        if (low < high) {
            mid = (low + high) / 2;
            sort(temp, low, mid, g);
            sort(temp, mid + 1, high, g);
            merging(temp, low, mid, high, g);

        } else {
            return;
        }
    }

    public void display(int arr[]) {
        int i;
        System.out.print("[");

        // Duyet qua tat ca phan tu
        for (i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }

        System.out.print("]\n");
    }

       int partition(int low, int high,Graphics g) {
        int pivot = array[high];
        int i = (low - 1); // index of smaller element
        Color oldColor = bars[high].getColor();
        bars[high].setColor(getBarColor(high));
        bars[high].draw(g);
        for (int j = low; j < high; j++) {

            // Nếu phần tử hiện tại nhỏ hơn chốt
            if (array[j] < pivot) {
                i++;

                // swap arr[i] và arr[j]
                swap(i, j);
                bars[i].setColor(getBarColor(i));
                bars[i].draw(g);
            }
        }

        // swap arr[i+1] và arr[high] (hoặc pivot)
           swap(i+1, high);
           bars[i+1].setColor(oldColor);
           bars[i+1].draw(g);
        return i + 1;
    }

    // arr[] --> Mảng cần được sắp xếp,
    // low --> chỉ mục bắt đầu,
    // high --> chỉ mục kết thúc
    void quickSort( int low, int high,Graphics g) {
        if (low < high) {

            // pi là chỉ mục của chốt, arr[pi] vị trí của chốt
            int pi = partition( low, high,g);
            bars[pi].setColor(getBarColor(pi));
            bars[pi].draw(g);
            // Sắp xếp đệ quy các phần tử
            // trướcphân vùng và sau phân vùng
            quickSort(low, pi - 1,g);
            quickSort( pi + 1, high,g);
        }
    }
    
}
